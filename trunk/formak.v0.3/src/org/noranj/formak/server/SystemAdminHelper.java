package org.noranj.formak.server;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.noranj.formak.server.domain.core.MailMessage;
import org.noranj.formak.server.domain.sa.SystemClientParty;
import org.noranj.formak.server.domain.sa.SystemUser;
import org.noranj.formak.server.service.JDOPMFactory;
import org.noranj.formak.server.service.SystemAdminServiceImpl;
import org.noranj.formak.server.service.servlet.SignUpMailHandlerServlet;
import org.noranj.formak.server.utils.Utils;
import org.noranj.formak.shared.Constants;
import org.noranj.formak.shared.dto.SystemClientPartyDTO;
import org.noranj.formak.shared.dto.SystemUserDTO;
import org.noranj.formak.shared.type.ActivityType;

import com.google.appengine.api.NamespaceManager;

/**
 * The methods in this class are used by services or servlets to implement services for System Admins.
 * 
 * This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY.
 * See http://www.noranj.org for further information.
 *
 * @author
 * @since 0.3
 * @version 0.3
 * @change
 *
 */
public class SystemAdminHelper {

  protected static Logger logger = Logger.getLogger(SystemAdminHelper.class.getName());

	/**
	 * 
	 * @param mail
	 */
	public static String signupUser(MailMessage mail) {
		
		logger.fine("Attributes in body are {");
		Map<String, String> dataFieldsFromBody = Utils.buildMap(mail.getBody().getContentAsString());
		/** extract first name, last name and email address from email when the data is available.
		 * The order of extracted the fields are always
		 * <ol>[0]=First Name
		 * <ol>[1]=Last Name
		 * <ol>[2]=Email Address
		 */
		String[] emailExtractedData=Utils.extractNamesFromEmail(mail.getFromAddress());
		
		if (logger.isLoggable(Level.FINE)) {
			for(String key:dataFieldsFromBody.keySet()) {
				logger.fine("key["+key+"] value=["+dataFieldsFromBody.get(key)+"]");
			} // for
		}
		
    SystemClientPartyDTO sysClientDTO = new SystemClientPartyDTO(dataFieldsFromBody);
    
    sysClientDTO.setActivityType(ActivityType.Active); // to make sure the user is active and can login.
    if (sysClientDTO.getName()==null) {
    	sysClientDTO.setName("client-guest-" + System.currentTimeMillis());
    }
    
    SystemUserDTO sysUserDTO = new SystemUserDTO(dataFieldsFromBody);
    
    sysUserDTO.setActivityType(ActivityType.Active); // to make sure the user is active and can login.
    sysUserDTO.setEmailAddress(emailExtractedData[2]); // to overwrite the emailAddress in the mail body
    
    if (sysUserDTO.getFirstName()==null && sysUserDTO.getLastName()==null) {
    	//XXX here use email adress tro extract the names. uses Utils....
    	//sysUserDTO.setFLName(mail.getFromAddress());
    	if (emailExtractedData[0]!=null && !emailExtractedData[0].equals(""))
    		sysUserDTO.setFirstName("Guest"); //TODO review 
    	
    	if (emailExtractedData[1]!=null && !emailExtractedData[1].equals(""))
    		sysUserDTO.setLastName(String.valueOf(System.currentTimeMillis()));
    }

    sysUserDTO.setId(signup(sysClientDTO, sysUserDTO));
    logger.info("A new user successfully signed up. userid["+sysUserDTO.getId()+"] email["+sysUserDTO.getEmailAddress()+"]");
		return(sysUserDTO.getId());
		
	}
	
	
  //TODO I am not sure about the parameters. BA-2012-03-22
  /**
   * it can be signed up by email and UI.
   * @return userID generated by the system for the new user.
   * @since 0.3.20120322
   * @version @since 0.3.20120322
   */
  public static String signup(SystemClientPartyDTO systemClientPartyDTO, SystemUserDTO systemUserDTO) {

    String currentNameSpace = NamespaceManager.get();
    NamespaceManager.set(Constants.C_SYSTEM_ADMIN_NAMESPACE); 

    try {
    	
	  	DALHelper<SystemClientParty> systemClientHelper = new DALHelper<SystemClientParty>(JDOPMFactory.getTxOptional(), SystemClientParty.class);

	  	SystemClientParty newSystemClientParty;
	    
	  	// check if client exist
	  	if(systemClientPartyDTO.getId()!=null) {
	  		newSystemClientParty =systemClientHelper.getEntityById(systemClientPartyDTO.getId(), null, 1); 
	  		if (newSystemClientParty == null) {
	  			logger.severe("SystemClientparty["+systemClientPartyDTO.getId()+"] does not exist in the system.");
	  			return null; //FIXME here
	  		}
	  	}
	  	else { // add client if it doesn't exist
	  		newSystemClientParty = new SystemClientParty(systemClientPartyDTO);
	  		systemClientHelper.storeEntity(newSystemClientParty);
	  	}
	  	
	  	//link the user to its parent.
	  	systemUserDTO.setParentClientId(newSystemClientParty.getId());
	  	
	  	// save the user in the system
	    DAL1ToNHelper<SystemClientParty, SystemUser> systemClientHelper2 = new DAL1ToNHelper<SystemClientParty, SystemUser>(JDOPMFactory.getTxOptional(), SystemClientParty.class, SystemUser.class);
	    SystemUser sysUser = new SystemUser(systemUserDTO);
	    systemUserDTO.setId(systemClientHelper2.addChildEntity(sysUser));
	    return(systemUserDTO.getId());
	    
    } finally {
    	NamespaceManager.set(currentNameSpace);
    }
  }

		
} //class
